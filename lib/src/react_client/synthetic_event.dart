/// Public `SyntheticEvent` API for use with [Component].
library react_client.synthetic_event;

import 'package:meta/meta.dart';
import 'package:react/react.dart';

/// A cross-browser wrapper around the browser's [nativeEvent].
///
/// It has the same interface as the browser's native event, including [stopPropagation] and [preventDefault], except
/// the events work identically across all browsers.
///
/// See: <https://facebook.github.io/react/docs/events.html#syntheticevent>
///
/// > __DEPRECATED.__
/// >
/// > Use [SyntheticEvent2] when migrating your [Component] instances to [Component2].
/// >
/// > Will be removed completely when [Component] is removed - in the 6.0.0 release.
@Deprecated('6.0.0')
class SyntheticEvent {
  /// Indicates whether the [Event] bubbles up through the DOM or not.
  ///
  /// See: <https://sdeveloper.mozilla.org/en-US/docs/Web/API/Event/bubbles>
  final bool bubbles;

  /// Indicates whether the [Event] is cancelable or not.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable>
  final bool cancelable;

  /// Identifies the current target for the event, as the [Event] traverses the DOM.
  ///
  /// It always refers to the [Element] the [Event] handler has been attached to as opposed to [target] which identifies
  /// the [Element] on which the [Event] occurred.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget>
  final /*DOMEventTarget*/ currentTarget;

  bool _defaultPrevented;

  dynamic _preventDefault;

  /// Indicates whether or not [preventDefault] was called on the event.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented>
  bool get defaultPrevented => _defaultPrevented;

  /// Cancels the [Event] if it is [cancelable], without stopping further propagation of the event.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault>
  void preventDefault() {
    _defaultPrevented = true;
    _preventDefault();
  }

  /// Prevents further propagation of the current event.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation>
  final dynamic stopPropagation;

  /// Indicates which phase of the [Event] flow is currently being evaluated.
  ///
  /// Possible values:
  ///
  /// > [Event.CAPTURING_PHASE] (1) - The [Event] is being propagated through the [target]'s ancestor objects. This
  /// process starts with the Window, then [HtmlDocument], then the [HtmlHtmlElement], and so on through the [Element]s
  /// until the [target]'s parent is reached. Event listeners registered for capture mode when
  /// [EventTarget.addEventListener] was called are triggered during this phase.
  ///
  /// > [Event.AT_TARGET] (2) - The [Event] has arrived at the [target]. Event listeners registered for this phase are
  /// called at this time. If [bubbles] is `false`, processing the [Event] is finished after this phase is complete.
  ///
  /// > [Event.BUBBLING_PHASE] (3) - The [Event] is propagating back up through the [target]'s ancestors in reverse
  /// order, starting with the parent, and eventually reaching the containing Window. This is known as bubbling, and
  /// occurs only if [bubbles] is `true`. [Event] listeners registered for this phase are triggered during this process.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase>
  final num eventPhase;

  /// Is `true` when the [Event] was generated by a user action, and `false` when the [Event] was created or modified
  /// by a script or dispatched via [Event.dispatchEvent].
  ///
  /// __Read Only__
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted>
  final bool isTrusted;

  /// Native browser event that [SyntheticEvent] wraps around.
  final /*DOMEvent*/ nativeEvent;

  /// A reference to the object that dispatched the event. It is different from [currentTarget] when the [Event]
  /// handler is called when [eventPhase] is [Event.BUBBLING_PHASE] or [Event.CAPTURING_PHASE].
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/target>
  final /*DOMEventTarget*/ target;

  /// Returns the [Time] (in milliseconds) at which the [Event] was created.
  ///
  /// _Starting with Chrome 49, returns a high-resolution monotonic time instead of epoch time._
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp>
  final num timeStamp;

  /// Returns a string containing the type of event. It is set when the [Event] is constructed and is the name commonly
  /// used to refer to the specific event.
  ///
  /// See: <https://developer.mozilla.org/en-US/docs/Web/API/Event/type>
  final String type;

  SyntheticEvent(
      this.bubbles,
      this.cancelable,
      this.currentTarget,
      this._defaultPrevented,
      this._preventDefault,
      this.stopPropagation,
      this.eventPhase,
      this.isTrusted,
      this.nativeEvent,
      this.target,
      this.timeStamp,
      this.type) {}
}

/// > __DEPRECATED.__
/// >
/// > Use [SyntheticClipboardEvent2] when migrating your [Component] instances to [Component2].
/// >
/// > Will be removed completely when [Component] is removed - in the 6.0.0 release.
@Deprecated('6.0.0')
class SyntheticClipboardEvent extends SyntheticEvent {
  final clipboardData;

  SyntheticClipboardEvent(
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    this.clipboardData,
  ) : super(
            bubbles,
            cancelable,
            currentTarget,
            defaultPrevented,
            preventDefault,
            stopPropagation,
            eventPhase,
            isTrusted,
            nativeEvent,
            target,
            timeStamp,
            type) {}
}

/// > __DEPRECATED.__
/// >
/// > Use [SyntheticKeyboardEvent2] when migrating your [Component] instances to [Component2].
/// >
/// > Will be removed completely when [Component] is removed - in the 6.0.0 release.
@Deprecated('6.0.0')
class SyntheticKeyboardEvent extends SyntheticEvent {
  final bool altKey;
  /// __DEPRECATED.__ This should no longer be used.
  @deprecated
  @experimental
  final String char;
  final bool ctrlKey;
  final String locale;
  final num location;
  final String key;
  final bool metaKey;
  final bool repeat;
  final bool shiftKey;
  final num keyCode;
  /// __DEPRECATED.__ Use [keyCode] instead.
  @deprecated
  final num charCode;

  SyntheticKeyboardEvent(
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    this.altKey,
    this.char,
    this.charCode,
    this.ctrlKey,
    this.locale,
    this.location,
    this.key,
    this.keyCode,
    this.metaKey,
    this.repeat,
    this.shiftKey,
  ) : super(
            bubbles,
            cancelable,
            currentTarget,
            defaultPrevented,
            preventDefault,
            stopPropagation,
            eventPhase,
            isTrusted,
            nativeEvent,
            target,
            timeStamp,
            type) {}
}

/// > __DEPRECATED.__
/// >
/// > Use [SyntheticFocusEvent2] when migrating your [Component] instances to [Component2].
/// >
/// > Will be removed completely when [Component] is removed - in the 6.0.0 release.
@Deprecated('6.0.0')
class SyntheticFocusEvent extends SyntheticEvent {
  final /*DOMEventTarget*/ relatedTarget;

  SyntheticFocusEvent(
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    this.relatedTarget,
  ) : super(
            bubbles,
            cancelable,
            currentTarget,
            defaultPrevented,
            preventDefault,
            stopPropagation,
            eventPhase,
            isTrusted,
            nativeEvent,
            target,
            timeStamp,
            type) {}
}

/// > __DEPRECATED.__
/// >
/// > Use [SyntheticFormEvent2] when migrating your [Component] instances to [Component2].
/// >
/// > Will be removed completely when [Component] is removed - in the 6.0.0 release.
@Deprecated('6.0.0')
class SyntheticFormEvent extends SyntheticEvent {
  SyntheticFormEvent(
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
  ) : super(
            bubbles,
            cancelable,
            currentTarget,
            defaultPrevented,
            preventDefault,
            stopPropagation,
            eventPhase,
            isTrusted,
            nativeEvent,
            target,
            timeStamp,
            type) {}
}

/// > __DEPRECATED.__
/// >
/// > Use [SyntheticDataTransfer2] when migrating your [Component] instances to [Component2].
/// >
/// > Will be removed completely when [Component] is removed - in the 6.0.0 release.
@Deprecated('6.0.0')
class SyntheticDataTransfer {
  final String dropEffect;
  final String effectAllowed;
  final List files;
  final List<String> types;

  SyntheticDataTransfer(
      this.dropEffect, this.effectAllowed, this.files, this.types);
}

/// > __DEPRECATED.__
/// >
/// > Use [SyntheticMouseEvent2] when migrating your [Component] instances to [Component2].
/// >
/// > Will be removed completely when [Component] is removed - in the 6.0.0 release.
@Deprecated('6.0.0')
class SyntheticMouseEvent extends SyntheticEvent {
  final bool altKey;
  final num button;
  final num buttons;
  final num clientX;
  final num clientY;
  final bool ctrlKey;
  final SyntheticDataTransfer dataTransfer;
  final bool metaKey;
  final num pageX;
  final num pageY;
  final /*DOMEventTarget*/ relatedTarget;
  final num screenX;
  final num screenY;
  final bool shiftKey;

  SyntheticMouseEvent(
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    this.altKey,
    this.button,
    this.buttons,
    this.clientX,
    this.clientY,
    this.ctrlKey,
    this.dataTransfer,
    this.metaKey,
    this.pageX,
    this.pageY,
    this.relatedTarget,
    this.screenX,
    this.screenY,
    this.shiftKey,
  ) : super(
            bubbles,
            cancelable,
            currentTarget,
            defaultPrevented,
            preventDefault,
            stopPropagation,
            eventPhase,
            isTrusted,
            nativeEvent,
            target,
            timeStamp,
            type) {}
}

class SyntheticPointerEvent extends SyntheticEvent {
  final num pointerId;
  final num width;
  final num height;
  final num pressure;
  final num tangentialPressure;
  final num tiltX;
  final num tiltY;
  final num twist;
  final String pointerType;
  final bool isPrimary;

  SyntheticPointerEvent(
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    this.pointerId,
    this.width,
    this.height,
    this.pressure,
    this.tangentialPressure,
    this.tiltX,
    this.tiltY,
    this.twist,
    this.pointerType,
    this.isPrimary,
  ) : super(
            bubbles,
            cancelable,
            currentTarget,
            defaultPrevented,
            preventDefault,
            stopPropagation,
            eventPhase,
            isTrusted,
            nativeEvent,
            target,
            timeStamp,
            type) {}
}

class SyntheticTouchEvent extends SyntheticEvent {
  final bool altKey;
  final /*DOMTouchList*/ changedTouches;
  final bool ctrlKey;
  final bool metaKey;
  final bool shiftKey;
  final /*DOMTouchList*/ targetTouches;
  final /*DOMTouchList*/ touches;

  SyntheticTouchEvent(
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    this.altKey,
    this.changedTouches,
    this.ctrlKey,
    this.metaKey,
    this.shiftKey,
    this.targetTouches,
    this.touches,
  ) : super(
            bubbles,
            cancelable,
            currentTarget,
            defaultPrevented,
            preventDefault,
            stopPropagation,
            eventPhase,
            isTrusted,
            nativeEvent,
            target,
            timeStamp,
            type) {}
}

class SyntheticUIEvent extends SyntheticEvent {
  final num detail;
  final /*DOMAbstractView*/ view;

  SyntheticUIEvent(
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool _defaultPrevented,
    dynamic _preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    this.detail,
    this.view,
  ) : super(
            bubbles,
            cancelable,
            currentTarget,
            _defaultPrevented,
            _preventDefault,
            stopPropagation,
            eventPhase,
            isTrusted,
            nativeEvent,
            target,
            timeStamp,
            type) {}
}

class SyntheticWheelEvent extends SyntheticEvent {
  final num deltaX;
  final num deltaMode;
  final num deltaY;
  final num deltaZ;

  SyntheticWheelEvent(
    bool bubbles,
    bool cancelable,
    dynamic currentTarget,
    bool defaultPrevented,
    dynamic preventDefault,
    dynamic stopPropagation,
    num eventPhase,
    bool isTrusted,
    dynamic nativeEvent,
    dynamic target,
    num timeStamp,
    String type,
    this.deltaX,
    this.deltaMode,
    this.deltaY,
    this.deltaZ,
  ) : super(
            bubbles,
            cancelable,
            currentTarget,
            defaultPrevented,
            preventDefault,
            stopPropagation,
            eventPhase,
            isTrusted,
            nativeEvent,
            target,
            timeStamp,
            type) {}
}
